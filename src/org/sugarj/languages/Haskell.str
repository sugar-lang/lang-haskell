module org/sugarj/languages/Haskell

signature
  constructors
                     : HaskellEmpty -> HaskellNoOffsideDeclList_HaskellEmpty0
                     : HaskellNoOffsideDeclList -> HaskellNoOffsideDeclList_HaskellEmpty0
                     : HaskellEmpty -> HaskellOffsideDeclList_HaskellEmpty0
                     : HaskellOffsideDeclList -> HaskellOffsideDeclList_HaskellEmpty0
    None             : OptHaskellExports0
    Conc             : ListStarOfCharClass0 * ListPlusOfCharClass0 -> ListPlusOfCharClass0
    Conc             : ListPlusOfCharClass0 * ListStarOfCharClass0 -> ListPlusOfCharClass0
    Conc             : ListPlusOfCharClass0 * ListPlusOfCharClass0 -> ListPlusOfCharClass0
    Cons             : Int * ListStarOfCharClass0 -> ListPlusOfCharClass0
    StmtSeq          : HaskellStmt * HaskellOffsideStmt -> HaskellOffsideStmt
                     : HaskellStmt -> HaskellOffsideStmt
    DeclSeq          : HaskellDecl * HaskellOffsideDecl -> HaskellOffsideDecl
                     : HaskellDecl -> HaskellOffsideDecl
    AltSeq           : HaskellAlt * HaskellOffsideAlt -> HaskellOffsideAlt
                     : HaskellAlt -> HaskellOffsideAlt
    TopdeclSeq       : HaskellTopdecl * HaskellOffsideTopdecl -> HaskellOffsideTopdecl
                     : HaskellTopdecl -> HaskellOffsideTopdecl
    ImportdeclSeq    : HaskellImportdecl * HaskellOffsideImportdecl -> HaskellOffsideImportdecl
                     : HaskellImportdecl -> HaskellOffsideImportdecl
    String           : List(HaskellStringChar) -> HaskellString-HASH
    Char             : HaskellCharChar -> HaskellChar-HASH
                     : String -> HaskellRATIONAL-HASH
                     : String -> HaskellFLOAT-HASH
                     : String -> HaskellINTEGER-HASH
    FlexibleContext  : List(HaskellFlexibleClass) -> HaskellFlexibleContext
    FlexibleContext  : HaskellFlexibleClass -> HaskellFlexibleContext
    SimpleClass      : HaskellQtycls * HaskellTyvar -> HaskellFlexibleClass
    Class            : HaskellQtycls * HaskellGtycon -> HaskellFlexibleClass
    Class            : HaskellQtycls * HaskellType -> HaskellFlexibleClass
                     : HaskellOffsideStmt -> HaskellOffsideStmtList
                     : HaskellStmt -> HaskellNoOffsideStmt
    StmtSeq          : HaskellNoOffsideStmt * HaskellNoOffsideStmtList -> HaskellNoOffsideStmtList
                     : HaskellNoOffsideStmt -> HaskellNoOffsideStmtList
                     : HaskellNoOffsideStmtList -> HaskellNoOffsideStmtBlock
    StmtList         : HaskellOffsideStmtList -> HaskellStmtList
    StmtList         : HaskellNoOffsideStmtBlock -> HaskellStmtList
    FBind            : HaskellQvar * HaskellExp -> HaskellFbind
    LetStmt          : HaskellDeclbinds -> HaskellStmt
    ExpStmt          : HaskellExp -> HaskellStmt
    BindStmt         : HaskellPat * HaskellExp -> HaskellStmt
                     : HaskellExp -> HaskellList
    PatBind          : HaskellQvar * HaskellPat -> HaskellFPat
    Labeled          : List(HaskellFPat) -> HaskellLabeledPat
    Irrefutable      : HaskellAPat -> HaskellAPat
    List             : List(HaskellPat) -> HaskellAPat
    Tuple            : HaskellPat * List(HaskellPat) -> HaskellAPat
                     : HaskellPat -> HaskellAPat
    Wildcard         : HaskellAPat
                     : HaskellLiteral -> HaskellAPat
    Labeled          : HaskellQcon * HaskellLabeledPat -> HaskellAPat
    Constr           : HaskellGcon -> HaskellAPat
    Named            : HaskellVar * HaskellAPat -> HaskellAPat
                     : HaskellVar -> HaskellAPat
    ConstrApp        : HaskellGcon * List(HaskellAPat) -> HaskellLPat
    Negation         : HaskellLiteral -> HaskellLPat
                     : HaskellAPat -> HaskellLPat
                     : HaskellLPat -> HaskellXPat
    BinOpApp         : HaskellPat * HaskellQconop * HaskellLPat -> HaskellXPat
    BinOpApp         : HaskellXPat * HaskellConsOp * HaskellPat -> HaskellPat
    BinOpApp         : HaskellPat * HaskellQconop * HaskellLPat -> HaskellPat
                     : HaskellLPat -> HaskellPat
                     : HaskellOffsideDecl -> HaskellOffsideDeclList
                     : HaskellDecl -> HaskellNoOffsideDecl
    DeclSeq          : HaskellNoOffsideDecl * HaskellNoOffsideDeclList -> HaskellNoOffsideDeclList
                     : HaskellNoOffsideDecl -> HaskellNoOffsideDeclList
                     : HaskellNoOffsideDeclList_HaskellEmpty0 -> HaskellNoOffsideDeclBlock
    DeclList         : HaskellOffsideDeclList_HaskellEmpty0 -> HaskellDeclList
    DeclList         : HaskellNoOffsideDeclBlock -> HaskellDeclList
                     : HaskellDeclList -> HaskellDeclbinds
                     : HaskellWhere -> HaskellMaybeWhere
    Where            : HaskellDeclList -> HaskellWhere
    NestedFunLHS     : HaskellFunLHS * List(HaskellAPat) -> HaskellFunLHS
    OpFunLHS         : HaskellPat * HaskellVarop * HaskellPat -> HaskellFunLHS
    VarFunLHS        : HaskellVar * List(HaskellAPat) -> HaskellFunLHS
                     : HaskellPat -> HaskellFunLHS
    Guarded          : HaskellExp * HaskellExp -> HaskellGdrh
    GdValdef         : HaskellFunLHS * List(HaskellGdrh) * HaskellMaybeWhere -> HaskellValdef
    Valdef           : HaskellFunLHS * HaskellExp * HaskellMaybeWhere -> HaskellValdef
                     : HaskellOffsideAlt -> HaskellOffsideAltList
                     : HaskellAlt -> HaskellNoOffsideAlt
    AltSeq           : HaskellNoOffsideAlt * HaskellNoOffsideAltList -> HaskellNoOffsideAltList
                     : HaskellNoOffsideAlt -> HaskellNoOffsideAltList
                     : HaskellNoOffsideAltList -> HaskellNoOffsideAltBlock
    AltList          : HaskellOffsideAltList -> HaskellAltList
    AltList          : HaskellNoOffsideAltBlock -> HaskellAltList
    GdPat            : HaskellExp * HaskellExp -> HaskellGdpat
    GdAlt            : HaskellPat * List(HaskellGdpat) * HaskellMaybeWhere -> HaskellAlt
    Alt              : HaskellPat * HaskellExp * HaskellMaybeWhere -> HaskellAlt
    LabelBinds       : List(HaskellFbind) -> HaskellLabelBinds
                     : HaskellQop -> HaskellQopNoNeg
    FixDecl          : HaskellInfix * HaskellPrec * HaskellOps -> HaskellFixdecl
                     : List(HaskellOp) -> HaskellOps
                     : Option(HaskellINTEGER) -> HaskellPrec
    InfixR           : HaskellInfix
    InfixL           : HaskellInfix
    Infix            : HaskellInfix
                     : List(HaskellAPat) -> HaskellFargs
    OpApp            : HaskellExp * HaskellQop * HaskellExp -> HaskellExp
    Typed            : HaskellExp * HaskellType -> HaskellExp
    AppBin           : HaskellExp * HaskellExp -> HaskellExp
    Labeled          : HaskellExp * HaskellLabelBinds -> HaskellExp
    Named            : HaskellQvar * HaskellExp -> HaskellExp
    List             : HaskellList -> HaskellExp
    Negation         : HaskellExp -> HaskellExp
    Case             : HaskellAnyExp * HaskellAltList -> HaskellExp
    Do               : HaskellStmtList -> HaskellExp
    If               : HaskellAnyExp * HaskellAnyExp * HaskellExp -> HaskellExp
    Let              : HaskellDeclbinds * HaskellExp -> HaskellExp
    Abs              : HaskellFargs * HaskellExp -> HaskellExp
    RSection         : HaskellQopNoNeg * HaskellExp -> HaskellExp
    LSection         : HaskellExp * HaskellQop -> HaskellExp
    Product          : HaskellExp * HaskellExps -> HaskellExp
    Lit              : HaskellLiteral -> HaskellExp
    Constr           : HaskellGcon -> HaskellExp
    Var              : HaskellQvar -> HaskellExp
                     : HaskellExp -> HaskellAnyExp
    SignDecl         : HaskellVars * Option(HaskellContext) * HaskellType -> HaskellSigndecl
                     : HaskellValdef -> HaskellDecl
                     : HaskellFixdecl -> HaskellDecl
                     : HaskellSigndecl -> HaskellDecl
    Class            : HaskellQtycls * HaskellTyvar * List(HaskellAType) -> HaskellClass
                     : HaskellSimpleClass -> HaskellClass
    SimpleClass      : HaskellQtycls * HaskellTyvar -> HaskellSimpleClass
                     : HaskellFlexibleContext -> HaskellSContext
    SContext         : List(HaskellSimpleClass) -> HaskellSContext
    SContext         : HaskellSimpleClass -> HaskellSContext
                     : HaskellFlexibleContext -> HaskellContext
    Context          : List(HaskellClass) -> HaskellContext
    Context          : HaskellClass -> HaskellContext
    InstArrow        : HaskellTyvar * HaskellTyvar -> HaskellInst
    InstList         : HaskellTyvar -> HaskellInst
    InstTuple        : HaskellTyvar * List(HaskellTyvar) -> HaskellInst
    InstApp          : HaskellGtycon * List(HaskellTyvar) -> HaskellInst
    InstCons         : HaskellGtycon -> HaskellInst
                     : HaskellType -> HaskellSbtype
                     : HaskellAType -> HaskellSatype
    InfixConstr      : HaskellSbtype * HaskellConop * HaskellSbtype -> HaskellConstr
    NoConstrDecls    : HaskellConstrs
    ConstrDecls      : List(HaskellConstr) -> HaskellConstrs
    ConstrDecl       : HaskellConid * List(HaskellSatype) -> HaskellConstr
                     : List(HaskellConstr) -> HaskellConstrs
    Derive           : List(HaskellQtycls) -> HaskellDeriving
    NoDeriving       : HaskellDeriving
    Derive           : HaskellQtycls -> HaskellDeriving
    TFunBin          : HaskellType * HaskellType -> HaskellType
    TAppBin          : HaskellType * HaskellType -> HaskellType
                     : HaskellAType -> HaskellType
    TProd            : HaskellType * HaskellTypes -> HaskellAType
    TList            : HaskellType -> HaskellAType
                     : HaskellType -> HaskellAType
    TVar             : HaskellTyvar -> HaskellAType
    TCon             : HaskellGtycon -> HaskellAType
    TList            : HaskellGtycon
    TUnit            : HaskellGtycon
    TArrow           : HaskellGtycon
                     : HaskellQtycon -> HaskellGtycon
    Hiding           : HaskellExportlist -> HaskellImpspec
    Impspec          : HaskellExportlist -> HaskellImpspec
    As               : HaskellModid -> HaskellAs
    Qualified        : HaskellQualified
    SOURCE           : HaskellSrc
    Import           : Option(HaskellSrc) * Option(HaskellQualified) * HaskellModid * Option(HaskellAs) * Option(HaskellImpspec) -> HaskellImportdecl
    ExportAllSub     : HaskellGtycon -> HaskellExport
    ExportNoSub      : HaskellGtycon -> HaskellExport
    ExportSomeSub    : HaskellGtycon * List(Qcname) -> Qcname
    ExportModule     : HaskellModid -> HaskellExport
    Exportlist       : List(HaskellExport) -> HaskellExportlist
                     : HaskellOffsideTopdecl -> HaskellOffsideTopdeclList
                     : HaskellOffsideImportdecl -> HaskellOffsideImportdeclList
                     : HaskellTopdecl -> HaskellNoOffsideTopdecl
    TopdeclSeq       : HaskellNoOffsideTopdecl * HaskellNoOffsideTopdeclList -> HaskellNoOffsideTopdeclList
                     : HaskellNoOffsideTopdecl -> HaskellNoOffsideTopdeclList
                     : HaskellImportdecl -> HaskellNoOffsideImportdecl
    ImportdeclSeq    : HaskellNoOffsideImportdecl * HaskellNoOffsideImportdeclList -> HaskellNoOffsideImportdeclList
                     : HaskellNoOffsideImportdecl -> HaskellNoOffsideImportdeclList
    Body             : HaskellOffsideImportdeclList * HaskellEmpty -> HaskellOffsideBody
    Body             : HaskellEmpty * HaskellOffsideTopdeclList -> HaskellOffsideBody
    Body             : HaskellEmpty * HaskellEmpty -> HaskellOffsideBody
    Body             : HaskellNoOffsideImportdeclList * HaskellNoOffsideTopdeclList -> HaskellNoOffsideBody
    Body             : HaskellNoOffsideImportdeclList * HaskellEmpty -> HaskellNoOffsideBody
    Body             : HaskellEmpty * HaskellNoOffsideTopdeclList -> HaskellNoOffsideBody
    Body             : HaskellEmpty * HaskellEmpty -> HaskellNoOffsideBody
    Empty            : HaskellEmpty
                     : HaskellOffsideBody -> HaskellBody
                     : HaskellNoOffsideBody -> HaskellBody
    FlexibleInstance : Option(HaskellSContext) * HaskellQtycls * List(HaskellAType) * HaskellMaybeWhere -> HaskellTopdecl
    Default          : List(HaskellType) -> HaskellTopdecl
    Instance         : Option(HaskellSContext) * HaskellQtycls * List(HaskellInst) * HaskellMaybeWhere -> HaskellTopdecl
    Class            : Option(HaskellSContext) * HaskellTycls * HaskellTyvar * HaskellMaybeWhere -> HaskellTopdecl
    Data             : Option(HaskellContext) * HaskellType * HaskellConstrs * HaskellDeriving -> HaskellTopdecl
    TypeDecl         : HaskellTycon * List(HaskellTyvar) * HaskellType -> HaskellTopdecl
                     : HaskellDecl -> HaskellTopdecl
    Program          : HaskellBody -> HaskellModule
    Module           : HaskellModid * OptHaskellExports0 * HaskellBody -> HaskellModule
                     : HaskellString-HASH -> HaskellLiteral
                     : HaskellChar-HASH -> HaskellLiteral
    Float            : HaskellRATIONAL-HASH -> HaskellLiteral
    Float            : HaskellFLOAT-HASH -> HaskellLiteral
    Int              : HaskellINTEGER-HASH -> HaskellLiteral
    CLitLit          : HaskellCLITLIT -> HaskellLiteral
    PrimDouble       : HaskellPRIMDOUBLE -> HaskellLiteral
    PrimFloat        : HaskellPRIMFLOAT -> HaskellLiteral
    PrimString       : HaskellPRIMSTRING -> HaskellLiteral
    PrimChar         : HaskellPRIMCHAR -> HaskellLiteral
    PrimInt          : HaskellPRIMINTEGER -> HaskellLiteral
                     : HaskellString -> HaskellLiteral
    Float            : HaskellRATIONAL -> HaskellLiteral
    Float            : HaskellFLOAT -> HaskellLiteral
                     : HaskellChar -> HaskellLiteral
    Int              : HaskellINTEGER -> HaskellLiteral
    HexadecimalEsc   : String -> HaskellEscape
    OctalEsc         : String -> HaskellEscape
    DecimalEsc       : String -> HaskellEscape
    ASCIIEsc         : String -> HaskellEscape
    CharEsc          : String -> HaskellEscape
    Gap              : ListPlusOfCharClass0 -> HaskellStringChar
    Escape           : HaskellEscape -> HaskellStringChar
                     : String -> HaskellStringChar
    Escape           : HaskellEscape -> HaskellCharChar
                     : String -> HaskellCharChar
    String           : List(HaskellStringChar) -> HaskellString
    Char             : HaskellCharChar -> HaskellChar
                     : String -> HaskellCLITLIT
                     : String -> HaskellPRIMDOUBLE
                     : String -> HaskellPRIMFLOAT
                     : String -> HaskellPRIMINTEGER
                     : String -> HaskellPRIMSTRING
                     : String -> HaskellPRIMCHAR
                     : String -> HaskellRATIONAL
                     : String -> HaskellFLOAT
                     : String -> HaskellINTEGER
    QModId           : String * HaskellQModid -> HaskellQModid
    QModId           : String * String -> HaskellQModid
    QConSym          : HaskellModid * String -> HaskellQCONSYM
    QVarSym          : HaskellModid * String -> HaskellQVARSYM
    QConId           : HaskellModid * String -> HaskellQCONID
    QVarId           : HaskellModid * String -> HaskellQVARID
                     : HaskellQModid -> HaskellModid
                     : String -> HaskellModid
                     : HaskellQCONID -> HaskellQconid
                     : HaskellConid -> HaskellQconid
                     : HaskellCONID -> HaskellConid
                     : HaskellQtycon -> HaskellQtycls
                     : HaskellTycon -> HaskellTycls
                     : HaskellQCONID -> HaskellQtycon
                     : HaskellTycon -> HaskellQtycon
                     : HaskellCONID -> HaskellTycon
                     : HaskellQVARSYM -> HaskellQvarsym1
                     : HaskellVARSYM -> HaskellVarsym
                     : HaskellQconid -> HaskellQcon
    BinCon           : HaskellQconsym -> HaskellQcon
                     : HaskellQconop -> HaskellQop
                     : HaskellQvarop -> HaskellQop
                     : HaskellConsOp -> HaskellQop
    ConsOp           : HaskellCONSOP -> HaskellConsOp
    PrefCon          : HaskellQconid -> HaskellQconop
                     : HaskellGconsym -> HaskellQconop
                     : HaskellQconsym -> HaskellGconsym
    PrefCon          : HaskellConid -> HaskellConop
                     : HaskellConsym -> HaskellConop
                     : HaskellCONSYM -> HaskellConsym
                     : HaskellQCONSYM -> HaskellQconsym
                     : HaskellConsym -> HaskellQconsym
                     : HaskellQvarsym1 -> HaskellQvarsym
                     : HaskellVarsym -> HaskellQvarsym
    PrefOp           : HaskellQvarid -> HaskellQvarop
                     : HaskellQvarsym -> HaskellQvarop
    PrefOp           : HaskellVarid -> HaskellVarop
                     : HaskellVarsym -> HaskellVarop
    ConOp            : HaskellConop -> HaskellOp
    Op               : HaskellVarop -> HaskellOp
    BinOp            : HaskellQvarsym -> HaskellQvar
                     : HaskellQvarid -> HaskellQvar
    BinOp            : HaskellVarsym -> HaskellVar
    Var              : HaskellVarid -> HaskellVar
                     : HaskellQVARID -> HaskellQvarid
                     : HaskellVarid -> HaskellQvarid
                     : HaskellQcon -> HaskellGcon
    EmptyList        : HaskellGcon
    Unit             : HaskellGcon
    Ins              : HaskellQvar -> HaskellVars
    Snoc             : HaskellVars * HaskellVar -> HaskellVars
                     : String -> HaskellTyvar
                     : String -> HaskellVarid
                     : String -> HaskellCONSOP
                     : String -> HaskellCONSYM
                     : String -> HaskellVARSYM
                     : String -> HaskellCONID


signature
  constructors
    Some : a -> Option(a)
    None : Option(a)


signature
  constructors
    Cons : a * List(a) -> List(a)
    Nil  : List(a)
    Conc : List(a) * List(a) -> List(a)
